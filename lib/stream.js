// Generated by CoffeeScript 1.6.2
var fs, mime, path;

fs = require('fs');

path = require('path');

mime = require('mime');

module.exports = function(req, res, next) {
  res.stream = function(src, headers, failure) {
    var end, ini, n, stat, stream, total, _ref;

    if (headers == null) {
      headers = {};
    }
    if (typeof headers === 'function') {
      failure = headers;
    }
    failure || (failure = function() {
      res.writeHead(404);
      return res.end();
    });
    if ('/' !== src.substr(0, 1)) {
      src = path.resolve(src);
    }
    if (!fs.existsSync(src)) {
      return failure();
    }
    stat = fs.statSync(src);
    if ((String(req.headers['if-modified-since'])) === (String(stat.mtime))) {
      res.writeHead(304);
      return res.end();
    }
    headers['Content-Type'] || (headers['Content-Type'] = mime.lookup(src));
    headers['Last-Modified'] || (headers['Last-Modified'] = stat.mtime);
    if (!req.headers.range || stat.size === 0) {
      headers['Content-Length'] || (headers['Content-Length'] = stat.size);
      res.writeHead(200, headers);
      stream = fs.createReadStream(src);
      stream.on('open', function() {
        return stream.pipe(res);
      });
    } else {
      total = stat.size;
      _ref = (function() {
        var _i, _len, _ref, _results;

        _ref = (req.headers.range.replace('bytes=', '')).split('-');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          _results.push(parseInt(n, 10));
        }
        return _results;
      })(), ini = _ref[0], end = _ref[1];
      if ((isNaN(end)) || (end === 0)) {
        end = total - 1;
      }
      headers['Connection'] || (headers['Connection'] = 'close');
      headers['Cache-Control'] || (headers['Cache-Control'] = 'private');
      headers['Content-Length'] = end + 1 - ini;
      headers['Content-Range'] = "bytes " + ini + "-" + end + "/" + total;
      headers['Accept-Range'] = 'bytes';
      headers['Transfer-Encoding'] || (headers['Transfer-Encoding'] = 'chunked');
      res.writeHead(206, headers);
      stream = fs.createReadStream(src, {
        start: ini,
        end: end
      });
      stream.on('open', function() {
        return stream.pipe(res);
      });
    }
    stream.on('error', function() {
      return failure();
    });
    return stream.on('end', function() {
      stream.destroy();
      stream = null;
      return res.end();
    });
  };
  return next();
};
